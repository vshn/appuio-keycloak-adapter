// Code generated by MockGen. DO NOT EDIT.
// Source: organization_controller.go

// Package controllers_test is a generated GoMock package.
package controllers_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	keycloak "github.com/vshn/appuio-keycloak-adapter/keycloak"
)

// MockKeycloakPutter is a mock of KeycloakPutter interface.
type MockKeycloakPutter struct {
	ctrl     *gomock.Controller
	recorder *MockKeycloakPutterMockRecorder
}

// MockKeycloakPutterMockRecorder is the mock recorder for MockKeycloakPutter.
type MockKeycloakPutterMockRecorder struct {
	mock *MockKeycloakPutter
}

// NewMockKeycloakPutter creates a new mock instance.
func NewMockKeycloakPutter(ctrl *gomock.Controller) *MockKeycloakPutter {
	mock := &MockKeycloakPutter{ctrl: ctrl}
	mock.recorder = &MockKeycloakPutterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycloakPutter) EXPECT() *MockKeycloakPutterMockRecorder {
	return m.recorder
}

// PutGroup mocks base method.
func (m *MockKeycloakPutter) PutGroup(ctx context.Context, group keycloak.Group) (keycloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGroup", ctx, group)
	ret0, _ := ret[0].(keycloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGroup indicates an expected call of PutGroup.
func (mr *MockKeycloakPutterMockRecorder) PutGroup(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGroup", reflect.TypeOf((*MockKeycloakPutter)(nil).PutGroup), ctx, group)
}
