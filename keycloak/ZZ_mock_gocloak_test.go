// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package keycloak_test is a generated GoMock package.
package keycloak_test

import (
	context "context"
	reflect "reflect"

	gocloak "github.com/Nerzal/gocloak/v11"
	gomock "github.com/golang/mock/gomock"
)

// MockGoCloak is a mock of GoCloak interface.
type MockGoCloak struct {
	ctrl     *gomock.Controller
	recorder *MockGoCloakMockRecorder
}

// MockGoCloakMockRecorder is the mock recorder for MockGoCloak.
type MockGoCloakMockRecorder struct {
	mock *MockGoCloak
}

// NewMockGoCloak creates a new mock instance.
func NewMockGoCloak(ctrl *gomock.Controller) *MockGoCloak {
	mock := &MockGoCloak{ctrl: ctrl}
	mock.recorder = &MockGoCloakMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoCloak) EXPECT() *MockGoCloakMockRecorder {
	return m.recorder
}

// AddUserToGroup mocks base method.
func (m *MockGoCloak) AddUserToGroup(ctx context.Context, token, realm, userID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", ctx, token, realm, userID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockGoCloakMockRecorder) AddUserToGroup(ctx, token, realm, userID, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockGoCloak)(nil).AddUserToGroup), ctx, token, realm, userID, groupID)
}

// CreateChildGroup mocks base method.
func (m *MockGoCloak) CreateChildGroup(ctx context.Context, accessToken, realm, groupID string, group gocloak.Group) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChildGroup", ctx, accessToken, realm, groupID, group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChildGroup indicates an expected call of CreateChildGroup.
func (mr *MockGoCloakMockRecorder) CreateChildGroup(ctx, accessToken, realm, groupID, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChildGroup", reflect.TypeOf((*MockGoCloak)(nil).CreateChildGroup), ctx, accessToken, realm, groupID, group)
}

// CreateGroup mocks base method.
func (m *MockGoCloak) CreateGroup(ctx context.Context, accessToken, realm string, group gocloak.Group) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, accessToken, realm, group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGoCloakMockRecorder) CreateGroup(ctx, accessToken, realm, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGoCloak)(nil).CreateGroup), ctx, accessToken, realm, group)
}

// DeleteGroup mocks base method.
func (m *MockGoCloak) DeleteGroup(ctx context.Context, accessToken, realm, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", ctx, accessToken, realm, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGoCloakMockRecorder) DeleteGroup(ctx, accessToken, realm, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGoCloak)(nil).DeleteGroup), ctx, accessToken, realm, groupID)
}

// DeleteUserFromGroup mocks base method.
func (m *MockGoCloak) DeleteUserFromGroup(ctx context.Context, token, realm, userID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromGroup", ctx, token, realm, userID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromGroup indicates an expected call of DeleteUserFromGroup.
func (mr *MockGoCloakMockRecorder) DeleteUserFromGroup(ctx, token, realm, userID, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromGroup", reflect.TypeOf((*MockGoCloak)(nil).DeleteUserFromGroup), ctx, token, realm, userID, groupID)
}

// GetGroupMembers mocks base method.
func (m *MockGoCloak) GetGroupMembers(ctx context.Context, accessToken, realm, groupID string, params gocloak.GetGroupsParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembers", ctx, accessToken, realm, groupID, params)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembers indicates an expected call of GetGroupMembers.
func (mr *MockGoCloakMockRecorder) GetGroupMembers(ctx, accessToken, realm, groupID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembers", reflect.TypeOf((*MockGoCloak)(nil).GetGroupMembers), ctx, accessToken, realm, groupID, params)
}

// GetGroups mocks base method.
func (m *MockGoCloak) GetGroups(ctx context.Context, accessToken, realm string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, accessToken, realm, params)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockGoCloakMockRecorder) GetGroups(ctx, accessToken, realm, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockGoCloak)(nil).GetGroups), ctx, accessToken, realm, params)
}

// GetUsers mocks base method.
func (m *MockGoCloak) GetUsers(ctx context.Context, accessToken, realm string, params gocloak.GetUsersParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, accessToken, realm, params)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockGoCloakMockRecorder) GetUsers(ctx, accessToken, realm, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockGoCloak)(nil).GetUsers), ctx, accessToken, realm, params)
}

// LoginAdmin mocks base method.
func (m *MockGoCloak) LoginAdmin(ctx context.Context, username, password, realm string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAdmin", ctx, username, password, realm)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAdmin indicates an expected call of LoginAdmin.
func (mr *MockGoCloakMockRecorder) LoginAdmin(ctx, username, password, realm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAdmin", reflect.TypeOf((*MockGoCloak)(nil).LoginAdmin), ctx, username, password, realm)
}

// LogoutPublicClient mocks base method.
func (m *MockGoCloak) LogoutPublicClient(ctx context.Context, clientID, realm, accessToken, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutPublicClient", ctx, clientID, realm, accessToken, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutPublicClient indicates an expected call of LogoutPublicClient.
func (mr *MockGoCloakMockRecorder) LogoutPublicClient(ctx, clientID, realm, accessToken, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutPublicClient", reflect.TypeOf((*MockGoCloak)(nil).LogoutPublicClient), ctx, clientID, realm, accessToken, refreshToken)
}

// UpdateGroup mocks base method.
func (m *MockGoCloak) UpdateGroup(ctx context.Context, accessToken, realm string, updatedGroup gocloak.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", ctx, accessToken, realm, updatedGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockGoCloakMockRecorder) UpdateGroup(ctx, accessToken, realm, updatedGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGoCloak)(nil).UpdateGroup), ctx, accessToken, realm, updatedGroup)
}

// UpdateUser mocks base method.
func (m *MockGoCloak) UpdateUser(ctx context.Context, accessToken, realm string, user gocloak.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, accessToken, realm, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockGoCloakMockRecorder) UpdateUser(ctx, accessToken, realm, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockGoCloak)(nil).UpdateUser), ctx, accessToken, realm, user)
}
